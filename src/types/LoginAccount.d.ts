/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth/v1/oidc/authorize": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post_authorize"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/v1/oidc/certs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get_certs"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/salt": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: never;
    put?: never;
    post?: operations["post_salt"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AuthRequest: {
      client_id: string;
      init_data: unknown;
    };
    ErrorResponse: {
      error: components["schemas"]["ErrorResponseType"];
      message: string;
      /** Format: int64 */
      timestamp: number;
    };
    ErrorResponseType:
      | "BadRequest"
      | "Connection"
      | "CSRFTokenError"
      | "Database"
      | "DatabaseIo"
      | "Disabled"
      | {
          DPoP: string | null;
        }
      | "Encryption"
      | {
          UseDpopNonce: ((string | null) & string)[];
        }
      | "Forbidden"
      | "Internal"
      | "JoseError"
      | "MfaRequired"
      | "NoSession"
      | "NotFound"
      | "PasswordExpired"
      | "PasswordRefresh"
      | "SessionExpired"
      | "SessionTimeout"
      | {
          /** Format: int64 */
          TooManyRequests: number;
        }
      | "Unauthorized"
      | {
          WWWAuthenticate: string;
        };
    JWKSCerts: {
      keys: components["schemas"]["JWKSPublicKeyCerts"][];
    };
    JWKSPublicKeyCerts: {
      alg: components["schemas"]["JwkKeyPairAlg"];
      crv?: string | null;
      e?: string | null;
      kid?: string | null;
      kty: components["schemas"]["JwkKeyPairType"];
      n?: string | null;
      x?: string | null;
    };
    /** @enum {string} */
    JwkKeyPairAlg: "RS256" | "RS384" | "RS512" | "EdDSA";
    /** @enum {string} */
    JwkKeyPairType: "RSA" | "OKP";
    LoginWidgetData: {
      /** Format: int32 */
      auth_date: number;
      first_name: string;
      hash: string;
      /** Format: int64 */
      id: number;
      last_name?: string | null;
      photo_url?: string | null;
      username?: string | null;
    };
    TokenSet: {
      id_token: string;
    };
    WebAppChat: {
      /** Format: int64 */
      id: number;
      last_name?: string | null;
      photo_url?: string | null;
      title: string;
      type: string;
    };
    WebAppInitData: {
      /** Format: int32 */
      auth_date: number;
      /** Format: int32 */
      can_send_after?: number | null;
      chat?: components["schemas"]["WebAppChat"] | null;
      chat_instance?: string | null;
      chat_type?: string | null;
      hash: string;
      query_id?: string | null;
      receiver?: components["schemas"]["WebAppUser"] | null;
      start_param?: string | null;
      user?: components["schemas"]["WebAppUser"] | null;
    };
    WebAppInitDataInRequest: {
      /** Format: int32 */
      auth_date: number;
      /** Format: int32 */
      can_send_after?: number | null;
      chat?: string | null;
      chat_instance?: string | null;
      chat_type?: string | null;
      hash: string;
      query_id?: string | null;
      receiver?: string | null;
      start_param?: string | null;
      user?: string | null;
    };
    WebAppUser: {
      added_to_attachment_menu?: boolean | null;
      allows_write_to_pm?: boolean | null;
      first_name: string;
      /** Format: int64 */
      id: number;
      is_bot?: boolean | null;
      is_premium?: boolean | null;
      language_code?: string | null;
      last_name?: string | null;
      photo_url?: string | null;
      username?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  post_authorize: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokenSet"];
        };
      };
      /** @description BadRequest */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description InternalServerError */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  get_certs: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the Json Web Key Set (JWKS) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JWKSCerts"];
        };
      };
      /** @description InternalServerError */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
